import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dgg8-8ov.js";const o=JSON.parse('{"title":"Github OAuth","description":"使用github登录自己的网站","frontmatter":{"description":"使用github登录自己的网站"},"headers":[],"relativePath":"notes/be/github-oauth.md","filePath":"notes/be/github-oauth.md","lastUpdated":null}'),n={name:"notes/be/github-oauth.md"};function h(l,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="github-oauth" tabindex="-1">Github OAuth <a class="header-anchor" href="#github-oauth" aria-label="Permalink to &quot;Github OAuth&quot;">​</a></h1><blockquote><ul><li>📅 <strong>日期</strong>：2018年3月11日 星期日</li><li>🌤 <strong>天气</strong>：天晴</li></ul></blockquote><p>说起来真是糟心，国内的三方登录大部分都是比较规范的<code>oAuth</code>。但是恶心就恶心在如果正式使用，网站必须有备案。唉，算了，看来也只有国外的没这个变态的要求了。</p><h2 id="在-github-上注册一个app" tabindex="-1">在 <a href="https://github.com/" target="_blank" rel="noreferrer">Github</a> 上注册一个APP <a class="header-anchor" href="#在-github-上注册一个app" aria-label="Permalink to &quot;在 [Github](https://github.com/) 上注册一个APP&quot;">​</a></h2><p>之前名字是<code>Applications</code>后来改成<code>OAuth applications</code>了。 点进去新建一个app然后填写对应的信息，这里不再赘述。</p><h2 id="在网站上配置授权登录" tabindex="-1">在网站上配置授权登录 <a class="header-anchor" href="#在网站上配置授权登录" aria-label="Permalink to &quot;在网站上配置授权登录&quot;">​</a></h2><p>开始</p><h3 id="_1、进入授权链接构建" tabindex="-1">1、进入授权链接构建 <a class="header-anchor" href="#_1、进入授权链接构建" aria-label="Permalink to &quot;1、进入授权链接构建&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 请求URL</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">https://github.com/login/oauth/authorize</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:left;">值</th></tr></thead><tbody><tr><td style="text-align:left;">client_id</td><td style="text-align:center;">String</td><td style="text-align:left;">注册App时官方分配的</td></tr><tr><td style="text-align:left;">redirect_uri</td><td style="text-align:center;">String</td><td style="text-align:left;">用户授权后带着code跳转的链接地址(如：<a href="http://www.woolson.cn/github/callback" target="_blank" rel="noreferrer">http://www.woolson.cn/github/callback</a>)</td></tr><tr><td style="text-align:left;">scope</td><td style="text-align:center;">String</td><td style="text-align:left;">控制需要获取权限的范围，具体看<a href="https://developer.github.com/v3/oauth/#scopes" target="_blank" rel="noreferrer">API</a>，第三方登录的这里就不用传这个参数就行了</td></tr><tr><td style="text-align:left;">state</td><td style="text-align:center;">String</td><td style="text-align:left;">这参数会在Github重定向的时候带着，用来判断获取信息请求是否被其他人拦截返回，可随机生成一段</td></tr></tbody></table><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 构建下面这个样链接</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">https://github.com/login/oauth/authorize?client_id</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">\${client_id}&amp;redirect_uri</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">\${redirect_uri}&amp;state</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">\${state}</span></span></code></pre></div><p>可在前端放置一枚按钮，直接 <code>location.href</code> 到此链接，然后会跳转至Github的授权页授权</p><h3 id="后端处理获取用户信息" tabindex="-1">后端处理获取用户信息 <a class="header-anchor" href="#后端处理获取用户信息" aria-label="Permalink to &quot;后端处理获取用户信息&quot;">​</a></h3><p>用户授权后跳转至 <code>redirect_uri</code> 后端路由处理拿到的 <code>code</code> 换取 <code>access_token</code>(获取用户信息关键)</p><p>code会带在<code>redirect_uri</code>后面，使用路由中 <code>request.query.code</code> 获取</p><p><code>http://www.woolson.cn/github/callback?code=*****&amp;state=*****</code></p><p>下面用 <code>code</code> 获取 <code>access_token</code></p><blockquote><p>我直接使用 NodeJS 的 <a href="https://github.com/request/request" target="_blank" rel="noreferrer">Request</a> 模块直接后端操作，so redirect_uri就不用了</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 请求URL</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">https://github.com/login/oauth/access_token</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:left;">值</th></tr></thead><tbody><tr><td style="text-align:left;">client_id</td><td style="text-align:center;">String</td><td style="text-align:left;">注册App时官方分配的</td></tr><tr><td style="text-align:left;">client_secret</td><td style="text-align:center;">String</td><td style="text-align:left;">注册App时官方分配的</td></tr><tr><td style="text-align:left;">code</td><td style="text-align:center;">String</td><td style="text-align:left;">刚刚那个code</td></tr><tr><td style="text-align:left;">state</td><td style="text-align:center;">String</td><td style="text-align:left;">在第一步中带的state，现在继续带上(其实不带入也可以的)</td></tr></tbody></table><p>用 <code>Request</code> 发送请求拿 <code>token</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> param</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  url: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;https://github.com/login/oauth/access_token&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  client_id: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;{client_id}&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  client_secret: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;{client_secret}&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  code: req.query.code,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">request</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fetchUrlwithParams</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(param), (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">err</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">response</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">body</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  body </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> JSON</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">parse</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(body)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  body.access_token </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// 这个就是需要拿到的token</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span></code></pre></div><blockquote><p>用 <code>access_token</code> 获取 <code>user</code> 的信息 注意：需要在请求中加入请求头 <code>User-Agent</code> 并且值为你APP的名称</p></blockquote><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span># 请求URL</span></span>
<span class="line"><span>https://api.github.com/user</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:center;">类型</th><th style="text-align:left;">值</th></tr></thead><tbody><tr><td style="text-align:left;">access_token</td><td style="text-align:center;">String</td><td style="text-align:left;">只需要带上上一步返回的access_token即可</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">if</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(body.access_token) {</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> param</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    url: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;https://api.github.com/user?access_token=&quot;</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> +</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> body.access_token,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    headers: {</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">      &quot;User-Agent&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app name&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  request</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(param, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">err</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">response</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">body</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    body </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> JSON</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">parse</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(body)</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    if</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">!</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">body.message) </span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">insertGithub</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(req, res, body)</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    else</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> res.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">redirect</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/study&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  })</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">else</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> res.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">redirect</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span></code></pre></div><p>如上，如果获取用户信息失败，会在返回信息中带有 <code>message</code> 字段。获取正常，存储用户信息；获取失败，重定向到网站首页。</p><h3 id="存储用户信息和种cookie" tabindex="-1">存储用户信息和种cookie <a class="header-anchor" href="#存储用户信息和种cookie" aria-label="Permalink to &quot;存储用户信息和种cookie&quot;">​</a></h3><blockquote><p>1、这一步是为啥呢，因为不可能每次打开网站都进行一次授权。小网站做登录有点矫情。 2、保存用户信息。怕保存数据量太大，对需要的信息保存一下。（本网站没保存任何敏感信息，只有名称和Github主页） 3、种植cookie，在浏览器中种上类似于ID的东西，用户访问就带上，类似于记住我的功能一样。等过期了，再让用户授权一次。</p></blockquote><p>可以使用Mongodb，进行数据保存，这里不做赘述。 种植 <code>cookie</code> 就是在重定向到网站的时候在 <code>Response</code> 中带上 <code>cookie</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> param</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  domain: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;.woolson.cn&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  maxAge: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">5184000000</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  httpOnly: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">false</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  secure: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">false</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  path: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">user.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">save</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">((</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">err</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">docs</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  res.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">cookie</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;user&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, hashs.nameHash, param)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  res.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">redirect</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/study&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span></code></pre></div><p>种上cookie以后就是取 <code>cookie</code>, Nodejs 需要在App上使用 <a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="noreferrer"><code>cookie-parser</code></a> Like this:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> cookieParser </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;cookie-parser&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">app.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">use</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">cookieParser</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">())</span></span></code></pre></div><p>然后在以后的请求中获取 <code>cookie</code></p><blockquote><p>在保存的时候种的cookie，里面带有你用户的ID用来取用户信息的。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">app.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">get</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/oauth/login&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">req</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">res</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> userID</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> req.cookies.user</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(userID) </span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getLoginUser</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(req, res)</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  else</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> jsonWrite</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(res)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span></code></pre></div><p>这样就能拿到信息啦……其实后面说的都比较简单，具体实现可以根据实际情况。</p>`,37)]))}const c=i(n,[["render",h]]);export{o as __pageData,c as default};

import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.Dgg8-8ov.js";const o=JSON.parse('{"title":"Git Submodule应用","description":"在项目中使用GitSubmodule复用通用代码","frontmatter":{"description":"在项目中使用GitSubmodule复用通用代码"},"headers":[],"relativePath":"notes/other/git-submodule.md","filePath":"notes/other/git-submodule.md","lastUpdated":null}'),t={name:"notes/other/git-submodule.md"};function h(e,s,p,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="git-submodule应用" tabindex="-1">Git Submodule应用 <a class="header-anchor" href="#git-submodule应用" aria-label="Permalink to &quot;Git Submodule应用&quot;">​</a></h1><blockquote><ul><li>📅 <strong>日期</strong>：2020年12月05日 星期六</li><li>🌤 <strong>天气</strong>：多云</li></ul></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>微信小程序项目，用户端和管理后台。两个服务中存在较多的相同代码：</p><ol><li>项目中的实体是完全一样的（不同人书写存在差异）</li><li>通用的类型，枚举值，接口</li><li>S3上传，服务健康检查，微信接口</li><li>通用工具函数</li></ol><h2 id="对比方案" tabindex="-1">对比方案 <a class="header-anchor" href="#对比方案" aria-label="Permalink to &quot;对比方案&quot;">​</a></h2><h3 id="_1-node-package" tabindex="-1">1. node package <a class="header-anchor" href="#_1-node-package" aria-label="Permalink to &quot;1. node package&quot;">​</a></h3><p>这个是最常用方案，然后将包发布到npm进行版本管理（或者公司内部的npm私服）</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>版本清晰，npm管理包版本</li><li>使用灵活，方便跨项目使用</li><li>和业务代码完全隔离</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>修改代码需要对应的发版</li><li>维护较麻烦：代码变更较频繁，每次都要发版</li><li>更新代码：每个成员都要执行npm install进行更新版本</li><li><strong>不方便查看源码：和业务代码存在一定关系，需要不定时查看源码</strong></li></ul><h3 id="_2-git-submodule" tabindex="-1">2. git submodule <a class="header-anchor" href="#_2-git-submodule" aria-label="Permalink to &quot;2. git submodule&quot;">​</a></h3><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>代码维护方便：在开发中，将修改提交即可</li><li>代码更新，在父仓库拉取会直接拉取更新</li><li>方便查看源码（和正常的项目代码一致）</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>对git操作有一定要求</li><li>容易混入业务代码，需要警惕</li><li>对版本不是很清晰</li></ul><p>在对比后，git submodule更符合我们项目特性：</p><ol><li>需要快速迭代更新，快速提交</li><li>方便查看源码</li><li>版本要求没那么高</li></ol><h2 id="实践中问题" tabindex="-1">实践中问题 <a class="header-anchor" href="#实践中问题" aria-label="Permalink to &quot;实践中问题&quot;">​</a></h2><h3 id="_1-通用代码耦合性太高" tabindex="-1">1. 通用代码耦合性太高 <a class="header-anchor" href="#_1-通用代码耦合性太高" aria-label="Permalink to &quot;1. 通用代码耦合性太高&quot;">​</a></h3><p>A项目在通用代码中混入了业务代码，需要引入一些在B项目不需要的依赖。为了满足通用代码，B项目引入了冗余依赖。</p><p>但这并不是我们想要的。所以，我们在通用代码中剔除了业务代码，保持通用代码的纯净。</p><h3 id="_2-相同代码实现不一样" tabindex="-1">2. 相同代码实现不一样 <a class="header-anchor" href="#_2-相同代码实现不一样" aria-label="Permalink to &quot;2. 相同代码实现不一样&quot;">​</a></h3><p>两个项目相同的代码，存在类型和部分实现不一样。导致在合并成统一仓库代码过程中需要将不同的部分进行统一。因涉及的面较广，测试覆盖要全，不然上线会有风险。</p><h3 id="_3-与原文件夹相同名称的submodule" tabindex="-1">3. 与原文件夹相同名称的submodule <a class="header-anchor" href="#_3-与原文件夹相同名称的submodule" aria-label="Permalink to &quot;3. 与原文件夹相同名称的submodule&quot;">​</a></h3><p>具体可参考官方文档：<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noreferrer">子模块</a></p><p>这个没处理好的现象是：明明修改的是submodule里面的文件，父仓库却追踪到文件变动（正常的情况应该是父仓库表达子仓库有变动）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 例如：项目根目录有个文件夹entities，现在需要把这个文件转化成submodule</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 1. 移除文件夹在父仓库中的追踪</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> rm</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -rf</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --cache</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> entities</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">rm</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -rf</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> entities</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 2. 添加submodule</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> submodule</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> add</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> &lt;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">ssh:仓库地</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">址</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">&gt;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> entities</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 3. 初始化submodule文件</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> submodule</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> update</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --init</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 4. 将对于父仓库子模块变动进行提交</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> add</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> .</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> &amp;&amp; </span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> commit</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -m</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;feat: 使用子模块替换entities文件夹&quot;</span></span></code></pre></div><p>上面这个对应当前分支是没问题了。这时，你切换到一个还没有使用submodule的分支，将会出现<strong>你的分支上面有很多文件变动，切换分支退出</strong>，这时候你需要强制切换分支：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> checkout</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> some_brach</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --force</span></span></code></pre></div><p>好了。切换分支成功，是不是发现多了好多文件的修改变动，但是根本没有动过或添加这些文件。这是直接强制清除即可（也会清除其他忽略的文件）。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> clean</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -fdx</span></span></code></pre></div><p>当你的分支都使用了submodule，就不会出现这样的问题了。</p><h3 id="_4-有submodule的分支与没有的分支合并" tabindex="-1">4. 有submodule的分支与没有的分支合并 <a class="header-anchor" href="#_4-有submodule的分支与没有的分支合并" aria-label="Permalink to &quot;4. 有submodule的分支与没有的分支合并&quot;">​</a></h3><p>如果转换成submodule的文件夹跟之前名称一致，在合并代码的时候git不知道这个文件夹到底是父仓库管理还是子模块管理的。这是后再父仓库将这个文件夹取消追踪，并使用submodule管理。需要进行以下步骤：</p><p><strong>在操作前，此子模块文件夹代码需要确认在子模块中都包含了。</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 第一步取消父仓库追踪</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> rm</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -rf</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --cache</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> folder_name</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 移除此文件夹</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">rm</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -rf</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> folder_name</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 将文件夹重新初始化成子模块</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> submodule</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> add</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> &lt;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">repo_ur</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">l</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">&gt;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> folder_name</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 合并后提交代码即可</span></span></code></pre></div><h3 id="_5-都有submodule的分支之间切换" tabindex="-1">5. 都有Submodule的分支之间切换 <a class="header-anchor" href="#_5-都有submodule的分支之间切换" aria-label="Permalink to &quot;5. 都有Submodule的分支之间切换&quot;">​</a></h3><p>切换分支后发现控制台显示有改动，如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">➜</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> status</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">位于分支</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> feature</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">您的分支与上游分支</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;origin/feature&#39;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 一致。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">尚未暂存以备提交的变更：</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  （使用</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;git add &lt;文件&gt;...&quot;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 更新要提交的内容）</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  （使用</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;git restore &lt;文件&gt;...&quot;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 丢弃工作区的改动）</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        修改：</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">     src/entities</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> (新提交)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">子模组已修改但尚未更新：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">*</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> src/entities 0d36f2a...e873cc6 (</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">3</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">):</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  &lt;</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> fix:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 修改已知问题</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">修改尚未加入提交（使用</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;git add&quot;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 和/或</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;git commit -a&quot;）</span></span></code></pre></div><p>因为切换分支的Submodule已经更新了，但是本地仓库的Submodule代码还未更新。使用已经命令更新即可：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 如果当前分支已经使用Submodule并且已经初始化，--init可以不用</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> submodule</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> update</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --init</span></span></code></pre></div><h3 id="_6-提交子模块的修改无法推到远程" tabindex="-1">6. 提交子模块的修改无法推到远程 <a class="header-anchor" href="#_6-提交子模块的修改无法推到远程" aria-label="Permalink to &quot;6. 提交子模块的修改无法推到远程&quot;">​</a></h3><p>当我们修改的子模块代码然后进行提交，commit之后发现无法推送远程。表现为当前的HEAD为游离的。如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> entities</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> on</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> master</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> [!] </span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">➜</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> add</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> .</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> &amp;&amp; </span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> commit</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -m</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;fix: 修改表名错误和字段统一&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">[分离头指针 de0d1d2] fix: 修改表名错误和字段统一</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> 2</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> files</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> changed,</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 3</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> insertions</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">+</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">,</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 3</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> deletions</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">-</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> entities</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> on</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> de0d1d2</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   </span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">➜</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> gco</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> master</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">警告：您正丢下</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 1</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 个提交，未和任何分支关联：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  de0d1d2</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> fix:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 修改表名错误和字段统一</span></span></code></pre></div><p>这时候因为本地父仓库的子模块未追踪远程最新，处在游离的提交中。我们切到master，并将刚刚的提交拿过来即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 1. 将刚刚的commit hash复制</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 2. 切到master分支</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> checkout</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> master</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 3. 使用cherry-pick将刚刚的提交拿过来</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> cherry-pick</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> &lt;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">commit_has</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">h</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">&gt;</span></span></code></pre></div><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>目前，这个方案还在初始阶段。刚开始的时候由于团队对submodule的使用不熟悉，会出现一些问题，耐心帮助解决即可。大家熟练了后，后面将会把更多通用代码抽离出来。</p>`,50)]))}const g=i(t,[["render",h]]);export{o as __pageData,g as default};

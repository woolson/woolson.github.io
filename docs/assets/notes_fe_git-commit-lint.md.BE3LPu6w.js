import{_ as i,c as a,o as n,ae as p}from"./chunks/framework.Dgg8-8ov.js";const l="/images/image%20(24).png",t="/images/git-commit.gif",e="/images/image%20(25).png",E=JSON.parse('{"title":"Git提交信息规范","description":"在项目中使用工具规范Git提交信息格式。","frontmatter":{"description":"在项目中使用工具规范Git提交信息格式。"},"headers":[],"relativePath":"notes/fe/git-commit-lint.md","filePath":"notes/fe/git-commit-lint.md","lastUpdated":null}'),h={name:"notes/fe/git-commit-lint.md"};function k(o,s,c,d,r,g){return n(),a("div",null,s[0]||(s[0]=[p('<h1 id="git提交信息规范" tabindex="-1">Git提交信息规范 <a class="header-anchor" href="#git提交信息规范" aria-label="Permalink to &quot;Git提交信息规范&quot;">​</a></h1><blockquote><ul><li>📅 <strong>日期</strong>：2018年8月15日 星期三</li><li>🌤 <strong>天气</strong>：阴天</li></ul></blockquote><p><img src="'+l+`" alt=""></p><p>在使用<code>Git</code>进行代码的分布式版本控制时，规范化<code>commit message</code>可以帮助程序猿在多人开发协作中更好的理解他人对代码的改动信息，避免大家按照各自的理解和习惯（甚至是随意）书写，而对他人和自己造成困惑，从而增加代码审查和纠错的时间成本。</p><p>本规范基于 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noreferrer">Angular 规范</a>，这是目前<code>commit message</code>使用最广的写法，比较合理和系统化，并且有配套的工具。</p><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p>一个规范化的<code>commit message</code>，具有以下作用：</p><ul><li>提供更多的历史信息，方便快速浏览</li><li>可以过滤某些<code>commit</code>（比如文档改动），便于快速查找信息</li><li>可以直接从<code>commit</code>生成<code>CHANGELOG.md</code></li></ul><h4 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h4><p>使用<code>git commit</code>可以提交多行，包括三个部分：</p><ul><li><strong>Header【必填】</strong></li><li>Body【选填】</li><li>Footer【选填】</li></ul><div class="language-markup vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markup</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; &lt;!-- header --&gt;</span></span>
<span class="line"><span>&lt;!-- 空一行 --&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;!-- 空一行 --&gt;</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><p>说明： ![](file:///Users/17080006/Documents/Gridea/post-images/1569483515406.svg)</p><p>任意一行都不应该超过100字符，这样的信息在<code>github</code>和各种各样的<code>git</code>工具上能有更好的可读性。</p><blockquote><p>注意<strong>Header 是必填</strong>，<em>Body 和 Footer 是选填。</em></p></blockquote><p><strong>Header</strong></p><p><code>Header</code>包括三个字段：</p><ul><li><strong>type（必填）</strong></li><li>scope（选填）</li><li><strong>subject（必填）</strong></li></ul><div class="language-markup vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markup</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span></code></pre></div><p><strong><code>Type</code></strong></p><p>用于说明<code>commit</code>的类别，只允许使用下面<code>7</code>个标识（<code>feat</code>、<code>fix</code>包含在<code>CHANGELOG.md</code>中）：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><p><strong><code>Scope</code></strong></p><p>用于说明 <code>commit</code> 影响的范围，比如数据层、控制层、视图层等等</p><p><strong><code>Subject</code></strong></p><p>用于对<code>commit</code>目的的简短描述，不超过50个字符</p><p>以动词开头，使用第一人称现在时，比如\`change\`，而不是\`changed\`或\`changes\`第一个字母小写结尾不加句号（.）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 示例一</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fix(login</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">): 修改登录账号加密方式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 示例二</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fix:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 去除登录页面console代码</span></span></code></pre></div><p><strong>Body</strong></p><p><code>Body</code>部分是对本次<code>commit</code>的详细描述，可以分成多行。下面是一个范例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">更加详细的解释文字，可以添加多行。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">-</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 可使用列表列出详细问题</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">-</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 开头为连字符加一个空格</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 示例一</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">本次修改utils.js中的fetch函数，增加了两个特性：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">-</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 参数showLoading控制请求是否显示加载中</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">-</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 参数quite控制请求出错是否使用全局提示</span></span></code></pre></div><p><strong>Footer</strong></p><p><code>Footer</code>部分只用于两种情况：</p><ul><li><p>不兼容变动</p><p>如果当前代码与上一个版本不兼容，则<code>Footer</code>部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p></li><li><p>关闭<code>Issue</code></p><p>如果当前<code>commit</code>针对某个<code>issue</code>，那么可以在<code>Footer</code>部分关闭这个<code>issue</code></p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 示例一</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Closes</span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"> #123, #456, #789</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 示例二</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BREAKING</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> CHANGE:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> fetch函数将在此次新版中不再支持回调函数，请注意修改相关代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">旧版使用</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fetch(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">{</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  success</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">    console.log(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;success&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  }</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">,</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  error</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">    console.error(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;error&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">新版使用</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">try</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  await</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> fetch</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  console.log(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;success&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">} catch (err) {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  console.error(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;error&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span></code></pre></div><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p><strong>feature示例</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 详细版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">feat(login</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">): 新增登录验证和记录机制</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">针对登录成功失败进行验证，并对问题进行记录，以分析具体用户具体的活动</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 简化版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">feat(login</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">): 新增登录验证和记录机制</span></span></code></pre></div><p><strong>fix示例</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 详细版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fix(login</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">): 修复了登录失败的问题</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">因登录接口对数据的接受格式不对，造成部分用户登录登录失败</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Closes</span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"> #9527, #5386</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 简化版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">fix(login</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">): 修复了登录失败的问题</span></span></code></pre></div><p><strong>refactore示例</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 详细版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">refactor:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 修改请求代理组件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">修改请求代理以减少代码中对baseUrl的依赖，所有的请求地址为直接的API</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BREAKING</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> CHANGE</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">旧版</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">$get(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BASE_URL</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> +</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;/api/get&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">新版</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">$get(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;/api/get&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 简化版</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">refactor:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> 修改请求代理组件由</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">$get(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BASE_URL</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> +</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;api&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">改为</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">$get(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">&#39;api&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span></code></pre></div><h4 id="提交工具" tabindex="-1">提交工具 <a class="header-anchor" href="#提交工具" aria-label="Permalink to &quot;提交工具&quot;">​</a></h4><p><strong>信息填写辅助</strong></p><p><strong>命令行提交</strong></p><p>在命令行中，使用工具 <a href="https://www.npmjs.com/package/commitizen" target="_blank" rel="noreferrer">commitizen</a> 来辅助格式化<code>git commit message</code>，它提供了一种问询式的方式去获取所需信息。</p><p><strong>安装</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> npm</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> install</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -g</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> commitizen</span></span></code></pre></div><p><strong>使用</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 直接使用执行提交</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> git</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> cz</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># OR=================</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># package.json 添加配置</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">{</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  &quot;script&quot;</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">    &quot;commit&quot;</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">:</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;npx git-cz&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 使用nodejs调用执行</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> npm</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> run</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> commit</span></span></code></pre></div><p>参照下面动图：</p><p><img src="`+t+`" alt="git-cz"></p><p><strong>GUI工具提交</strong></p><p>在 <code>VsCode</code> 编辑器 <code>Extensions</code> 里面搜索 <a href="vscode:extension/KnisterPeter.vscode-commitizen" target="_blank" rel="noreferrer">Visual Studio Code Commitizen Support</a> (或点击此链接进行安装)。</p><p><strong>使用方式：</strong></p><ul><li>打开命令面板 (ctrl+shift+p or command+shift+p) 输入 &#39;conventional commit&#39;；</li><li>选择此次提交类型 (type, scope, subject, body, breaking changes, closed issues)；</li><li>然后按步骤填写对应的信息。</li></ul><blockquote><p>提交过程中可以按 <code>[ESC]</code> 键退出此次提交</p></blockquote><p><em>使用 <code>SourceTree</code> 这款软件提交信息也需要按规范填写。</em></p><p><strong>信息验证</strong></p><blockquote><p>信息验证和代码格式验证一样是强制执行的，错误格式的提交信息是不允许的。</p></blockquote><p>在验证提交信息是否符合规范时这里会用到三个东西：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">{</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">  &quot;husky&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">    &quot;hooks&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">      // 提交信息钩子：执行信息验证。通过则提交成功，不通过则提交失败</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">      &quot;commit-msg&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;commitlint -e $GIT_PARAMS&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  },</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">  &quot;commitlint&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">    &quot;extends&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: [</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">      // 使用angular提交规范</span></span>
<span class="line"><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">      &quot;@commitlint/config-angular&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ]</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span></code></pre></div><p>在执行 <code>git</code> 提交信息时触发 <code>commit-msg</code> 钩子进行信息验证。<strong>通过验证正常提交，未通过查看错误信息修改并重新修改</strong>。</p><p><img src="`+e+`" alt=""></p><h4 id="结果展示" tabindex="-1">结果展示 <a class="header-anchor" href="#结果展示" aria-label="Permalink to &quot;结果展示&quot;">​</a></h4><p>可使用工具<code>conventional-changelog-cli</code>生成此次发版包含的提交内容。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">$</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> conventional-changelog</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -p</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> angular</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -i</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> CHANGELOG.md</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -s</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;"># 将在根目录生成CHANGELOG.md文件</span></span></code></pre></div>`,67)]))}const y=i(h,[["render",k]]);export{E as __pageData,y as default};

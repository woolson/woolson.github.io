import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dgg8-8ov.js";const g=JSON.parse('{"title":"Function中的arguments对象","description":"","frontmatter":{"title":"Function中的arguments对象"},"headers":[],"relativePath":"notes/fe/function-arguments.md","filePath":"notes/fe/function-arguments.md","lastUpdated":null}'),l={name:"notes/fe/function-arguments.md"};function h(e,s,p,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<blockquote><p><strong>MDN</strong>：arguments对象是所有（非箭头）函数中都可用的局部变量。你可以使用arguments对象在函数中引用函数的参数。arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性。</p></blockquote><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noreferrer">MDN</a>的介绍中，<code>arguments</code>对象描述有以下关键词：</p><ol><li><strong>非箭头函数</strong>中的局部变量；</li><li><strong>引用</strong>函数的参数；</li><li>是<strong>类数组</strong>对象；</li></ol><p>下面一一来确认及展开。</p><h3 id="非箭头函数局部变量" tabindex="-1">非箭头函数局部变量 <a class="header-anchor" href="#非箭头函数局部变量" aria-label="Permalink to &quot;非箭头函数局部变量&quot;">​</a></h3><p>ES6箭头函数内部没有<code>arguments</code>局部变量。</p><p><img src="https://gitlab.com/imgrs/pic/uploads/8829907bf9a20d868e514729e6c7d7a8/ridfx2w.png" alt="箭头函数arguments"></p><p>ES6箭头函数最为熟知的属性之一是它没有自己的<code>this</code>，在它内部访问<code>this</code>时，访问的是上层作用域的<code>this</code>，这里的<code>arguments</code>变量也是。</p><p><img src="https://gitlab.com/imgrs/pic/uploads/833d043723ef2b31c2055a1d921cc1ea/khwggq2.png" alt="箭头函数arguments来源"></p><h3 id="引用函数的参数" tabindex="-1">引用函数的参数 <a class="header-anchor" href="#引用函数的参数" aria-label="Permalink to &quot;引用函数的参数&quot;">​</a></h3><p>如果函数参数是引用类型参数，在使用<code>arguments</code>变量时要小心。</p><p><img src="https://gitlab.com/imgrs/pic/uploads/41f11ddc6e7e8a78c0b4f0fd6e957f41/l09miou.png" alt="引用类型参数"></p><h3 id="类数组对象" tabindex="-1">类数组对象 <a class="header-anchor" href="#类数组对象" aria-label="Permalink to &quot;类数组对象&quot;">​</a></h3><p>虽然<code>arguments</code>元素访问的方式是按下标进行获取的，但这不能说明他就是一个数组，他的结构是这样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">function</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;args1&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, [</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">200</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">], {</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">name</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;params&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}) {})()</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">/** arguments是这样一个对象 */</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">{</span></span>
<span class="line"><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">  0</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;args1&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">  1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: [</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">200</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">],</span></span>
<span class="line"><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">  2</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: {name: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;params&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">},</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  length</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">3</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  callee,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  [Symbol.iterator],</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span></code></pre></div><p><code>arguments</code>对象的属性由：</p><ul><li>参数索引: 参数值</li><li>length：参数个数</li><li>callee：当前函数的引用</li><li>[Symbol.iterator]：参数元素迭代器</li></ul><p>它虽然可以按下标去获取数据，但是它的类型是个对象，所以不可使用数组方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">console.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">log</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">[</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">0</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">]) </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// &#39;args1&#39;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">console.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">log</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">[</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">]) </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// [200]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">pop</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">() </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// Uncaught TypeError: arguments.pop is not a function</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// 由于 arguments 对象上有迭代器属性，所以其可以使用for循环</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">for</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> key</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> of</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">  console.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">log</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(key)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span></code></pre></div><p>类数组对象可转换成真正的数组：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">Array</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">prototype</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.slice.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">call</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// [&#39;args1&#39;, [200], {name: &#39;params&#39;}]</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// 或ES6数组方法</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">Array.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">from</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">arguments</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// [&#39;args1&#39;, [200], {name: &#39;params&#39;}]</span></span></code></pre></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><p>综上，<code>arguments</code>对象的特性了解记录。</p>`,24)]))}const o=i(l,[["render",h]]);export{g as __pageData,o as default};

import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"unsupported protocol错误","description":"Nodejs请求报unsupported protocol错误","frontmatter":{"description":"Nodejs请求报unsupported protocol错误"},"headers":[],"relativePath":"notes/be/exception/nodejs_tls.md","filePath":"notes/be/exception/nodejs_tls.md","lastUpdated":1751126425000}'),n={name:"notes/be/exception/nodejs_tls.md"};function l(p,s,h,o,k,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="unsupported-protocol错误" tabindex="-1">unsupported protocol错误 <a class="header-anchor" href="#unsupported-protocol错误" aria-label="Permalink to &quot;unsupported protocol错误&quot;">​</a></h1><blockquote><ul><li>📅 <strong>日期</strong>：2020年11月17日 星期二</li><li>🌤 <strong>天气</strong>：多云微风</li></ul></blockquote><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><ul><li>Nodejs version: 12.19.0</li><li>axios version: 0.21.0</li></ul><p>目的是爬虫某个网站，每天自动获取想要的信息然后推送到个人微信上。爬取某个页面的时候报错，错误信息如下：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">SSL routines:ssl_choose_client_version:unsupported protocol:...</span></span></code></pre></div><h2 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-label="Permalink to &quot;问题分析&quot;">​</a></h2><p>主要的错误信息如下：</p><ol><li>SSL</li><li>unsupported protocol</li></ol><p>基于<code>stackoverflow</code> 搜索一下，得到错误原因：<strong><code>Node.js 12&#39;s default TLS settings are stricter now. The site doesn&#39;t handle TLS v1.2. Node 12 by default need 1.2.(Nodejs 12的 TSL 设置更加严格了， 默认使用1.2版本，如果网站不支持将出现以上错误：不被支持的协议).</code></strong></p><p>所以，因为所爬取的网站不支持<code>TLS1.2</code>返回以上错误。</p><h2 id="问题解决" tabindex="-1">问题解决 <a class="header-anchor" href="#问题解决" aria-label="Permalink to &quot;问题解决&quot;">​</a></h2><p>在实际项目中有以下几种方式，目的就是设置Nodejs TLS最低版本：</p><h3 id="代码中直接设置" tabindex="-1">代码中直接设置 <a class="header-anchor" href="#代码中直接设置" aria-label="Permalink to &quot;代码中直接设置&quot;">​</a></h3><p>在项目入口处进行设置</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> { NestFactory } </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;@nestjs/core&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> { AppModule } </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;./app.module&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">require</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;tls&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">).</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">DEFAULT_MIN_VERSION</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &#39;TLSv1&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">async</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> function</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> bootstrap</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> app</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> await</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> NestFactory.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">create</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(AppModule);</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">  await</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> app.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">listen</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">3001</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">bootstrap</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><h3 id="在命令行中设置" tabindex="-1">在命令行中设置 <a class="header-anchor" href="#在命令行中设置" aria-label="Permalink to &quot;在命令行中设置&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">node</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> main.js</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --tls-min-v1.0</span></span></code></pre></div><h3 id="在ts-node中使用" tabindex="-1">在<code>ts-node</code>中使用 <a class="header-anchor" href="#在ts-node中使用" aria-label="Permalink to &quot;在\`ts-node\`中使用&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">node</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --tls-min-v1.0</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> -r</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> ts-node/register</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> src/main.ts</span></span></code></pre></div><h3 id="在pm2中使用" tabindex="-1">在<code>pm2</code>中使用 <a class="header-anchor" href="#在pm2中使用" aria-label="Permalink to &quot;在\`pm2\`中使用&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-dark github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">pm2</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> start</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> dist/main.js</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> --node-args</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> \\&quot;</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">--tls-min-v1.0</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">\\&quot;</span></span></code></pre></div>`,22)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
